import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, Menu
import requests
import time
import threading
import importlib
import json
import sys
import zipfile
import shutil
from datetime import datetime, timedelta

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
SETTINGS_FILE = os.path.join(CURRENT_DIR, "settings.json")
CURRENT_VERSION = "1"
VERSION_URL = "https://api.github.com/repos/Devyzn/Devyzn/releases/latest"
UPDATE_URL = "https://raw.githubusercontent.com/Devyzn/Devyzn/main/Main"




class ThemedWindow(tk.Toplevel):
    def __init__(self, parent, theme_var, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        self.parent = parent
        self.theme_var = theme_var
        self.load_settings()
        self.change_theme()

    def load_settings(self):
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r') as file:
                settings = json.load(file)
                if "theme" in settings and settings["theme"]:
                    self.theme_var.set(settings["theme"])
                    return
        self.theme_var.set("light")

    def change_theme(self):
        theme = self.theme_var.get()
        bg_color = "#F0F0F0" if theme == "light" else "#202020"
        self.configure(bg=bg_color)
        self.apply_theme_to_children(self)
        for widget in self.winfo_children():
            if widget.winfo_class() in ['Frame', 'Label', 'TFrame', 'TLabel']:
                widget.configure(bg=bg_color)

    def apply_theme_to_children(self, parent):
        for widget in parent.winfo_children():
            if widget.winfo_class() in ['Frame', 'TFrame', 'Canvas', 'ScrolledText']:
                widget.configure(bg=parent['bg'])
            elif widget.winfo_class() in ['Label', 'TLabel']:
                widget.configure(bg=parent['bg'])
                widget.config(fg="white" if parent['bg'] == "#202020" else "black")
            self.apply_theme_to_children(widget)

    def save_settings(self, settings):
        with open(SETTINGS_FILE, 'w') as file:
            json.dump(settings, file)

    def load_settings(self):
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r') as file:
                settings = json.load(file)
                if "theme" in settings and settings["theme"]:
                    return settings
        return {"theme": "dark"}

class RoundedButton(tk.Canvas):
    def __init__(self, parent, text, radius=10, width=150, height=40, bg="#007bff", fg="white", command=None, *args, **kwargs):
        super().__init__(parent, width=width, height=height, highlightthickness=0, bg=parent['bg'])
        self.radius = radius
        self.bg = bg
        self.fg = fg
        self.command = command
        self.cooldown = False  # Flag to indicate if button is on cooldown

        self.create_rounded_rectangle(0, 0, width, height, radius, fill=bg, outline="")
        self.create_text(width // 2, height // 2, text=text, fill=fg, font=("Arial", 12), tags="text")

        self.bind("<Button-1>", self._on_click)

    def create_rounded_rectangle(self, x1, y1, x2, y2, radius=25, **kwargs):
        self.create_arc(x1, y1, x1 + 2 * radius, y1 + 2 * radius, start=90, extent=90, **kwargs)
        self.create_arc(x2 - 2 * radius, y1, x2, y1 + 2 * radius, start=0, extent=90, **kwargs)
        self.create_arc(x1, y2 - 2 * radius, x1 + 2 * radius, y2, start=180, extent=90, **kwargs)
        self.create_arc(x2 - 2 * radius, y2 - 2 * radius, x2, y2, start=270, extent=90, **kwargs)
        self.create_rectangle(x1 + radius, y1, x2 - radius, y2, fill=kwargs.get('fill', None), outline=kwargs.get('outline', None))
        self.create_rectangle(x1, y1 + radius, x2, y2 - radius, fill=kwargs.get('fill', None), outline=kwargs.get('outline', None))

    def _on_click(self, event):
        if not self.cooldown:  # Check if button is not on cooldown
            if self.command:
                self.cooldown = True  # Set cooldown flag
                self.command()  # Execute the command
                self.after(5000, self.release_cooldown)  # Release cooldown after 5 seconds

    def release_cooldown(self):
        self.cooldown = False  # Release cooldown


def check_token(token):
    headers = {
        'Authorization': token,
        'Content-Type': 'application/json'
    }
    response = requests.get('https://discord.com/api/v9/users/@me', headers=headers)
    return response.status_code == 200

def get_random_word():
    response = requests.get('https://random-word-api.herokuapp.com/word')
    if response.status_code == 200:
        return response.json()[0]
    else:
        return "Hello"

def get_user_username(token):
    headers = {
        'Authorization': token,
        'Content-Type': 'application/json'
    }
    response = requests.get('https://discord.com/api/v9/users/@me', headers=headers)
    if response.status_code == 200:
        return response.json()['username']
    else:
        return None

class DiscordMessageSenderWindow(ThemedWindow):
    def __init__(self, parent, theme_var):
        super().__init__(parent, theme_var)
        self.title("Discord Message Sender")
        self.geometry("600x600")
        self.root = parent

        # Entry Fields
        tk.Label(self, text="Token:", bg=self['bg'], fg="white").pack(pady=5)
        self.token_entry = tk.Entry(self, bg="#555", fg="white")
        self.token_entry.pack(pady=5)

        tk.Label(self, text="Total Messages:", bg=self['bg'], fg="white").pack(pady=5)
        self.total_messages_entry = tk.Entry(self, bg="#555", fg="white")
        self.total_messages_entry.pack(pady=5)

        tk.Label(self, text="Delay (seconds):", bg=self['bg'], fg="white").pack(pady=5)
        self.delay_entry = tk.Entry(self, bg="#555", fg="white")
        self.delay_entry.pack(pady=5)

        tk.Label(self, text="Channel ID:", bg=self['bg'], fg="white").pack(pady=5)
        self.channel_id_entry = tk.Entry(self, bg="#555", fg="white")
        self.channel_id_entry.pack(pady=5)

        # Log Area
        self.log_text = scrolledtext.ScrolledText(self, width=40, height=10, state='disabled', bg="#555", fg="white")
        self.log_text.pack(pady=10, fill='both', expand=True)

        # Start Button
        self.start_button = RoundedButton(self, text="Start", command=self.toggle_sending, width=150, height=40)
        self.start_button.pack(pady=5)

        # Back Button
        self.back_button = RoundedButton(self, text="Back to Main Menu", command=self.back_to_main, width=150, height=40)
        self.back_button.pack(pady=5, side=tk.BOTTOM)

        self.sending = False
        self.token = tk.StringVar()
        self.total_messages = tk.IntVar()
        self.delay = tk.IntVar()
        self.channel_id = tk.StringVar()

    def log_message(self, message, color):
        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, message + '\n', color)
        self.log_text.see(tk.END)  # Scroll to the end
        self.log_text.config(state='disabled')

    def toggle_sending(self):
        if self.sending:
            self.sending = False
        else:
            token = self.token_entry.get().strip()
            if not check_token(token):
                messagebox.showerror("Error", "Invalid token")
                return

            self.username = get_user_username(token)
            if not self.username:
                messagebox.showerror("Error", "Could not retrieve username")
                return

            self.sending = True
            self.log_text.config(state='normal')
            self.log_text.insert(tk.END, f"Starting message sending...\n", "info")
            self.log_text.config(state='disabled')
            threading.Thread(target=self.send_messages, args=(token,)).start()

    def send_messages(self, token):
        total_messages = int(self.total_messages_entry.get())
        delay = int(self.delay_entry.get())
        channel_id = self.channel_id_entry.get()

        headers = {
            'Authorization': token,
            'Content-Type': 'application/json'
        }
        for i in range(total_messages):
            if not self.sending:
                break
            word = get_random_word()
            payload = {
                'content': word,
                'tts': False
            }
            response = requests.post(f'https://discord.com/api/v9/channels/{channel_id}/messages', headers=headers, json=payload)
            if response.status_code == 200:
                self.log_text.config(state='normal')
                self.log_text.insert(tk.END, f"Message {i+1}: {word}\n", "success")
                self.log_text.config(state='disabled')
            else:
                self.log_text.config(state='normal')
                self.log_text.insert(tk.END, f"Failed to send message {i+1}\n", "error")
                self.log_text.config(state='disabled')
            time.sleep(delay)

        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, "Message sending complete.\n", "info")
        self.log_text.config(state='disabled')
        self.sending = False

    def back_to_main(self):
        self.destroy()
        self.root.deiconify()
class AccessCodeWindow:
    def __init__(self, root):
        self.root = root
        self.root.geometry("400x200")
        self.root.title("Access Code")

        self.theme_var = tk.StringVar(value="dark")  # Default to dark theme

        self.access_code_valid_until = None  # Variable to store expiration time of access code

        tk.Label(root, text="Enter Access Code:", fg="white", bg="#333").pack(pady=20)
        self.access_code_entry = tk.Entry(root, show="*", bg="#555", fg="white")
        self.access_code_entry.pack(pady=10)
        ttk.Button(root, text="Submit", command=self.check_access_code, style="Custom.TButton").pack(pady=10)

        self.root.configure(bg="#333")

        self.check_saved_access_code()  # Check if access code is saved

    def check_saved_access_code(self):
        # Check if there's a saved access code and if it's within the last 24 hours
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r') as file:
                settings = json.load(file)
                if "access_code_valid_until" in settings and settings["access_code_valid_until"]:
                    valid_until_str = settings["access_code_valid_until"]
                    self.access_code_valid_until = datetime.strptime(valid_until_str, "%Y-%m-%d %H:%M:%S")
                    if datetime.now() < self.access_code_valid_until:
                        self.root.withdraw()
                        MainApplication(self.root, self.theme_var, self.access_code_valid_until)
                        return
        self.root.mainloop()

    def check_access_code(self):
        access_code = self.access_code_entry.get().strip()
        if access_code == "Devyzn":  # Replace with your actual key checking logic
            # Set expiration time of access code to current time + 24 hours
            self.access_code_valid_until = datetime.now() + timedelta(hours=24)
            # Save access code expiration time
            settings = {"access_code_valid_until": self.access_code_valid_until.strftime("%Y-%m-%d %H:%M:%S")}
            with open(SETTINGS_FILE, 'w') as file:
                json.dump(settings, file)
            self.root.withdraw()
            MainApplication(self.root, self.theme_var, self.access_code_valid_until)
        else:
            messagebox.showerror("Error", "Invalid Access Code")

class MainApplication(ThemedWindow):
    def __init__(self, root, theme_var, access_code_valid_until):
        super().__init__(root, theme_var)
        self.title("Main Menu")
        self.geometry("400x400")
        self.access_code_valid_until = access_code_valid_until

        # Create menu
        menubar = Menu(self)
        self.config(menu=menubar)

        file_menu = Menu(menubar, tearoff=False)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Exit", command=self.exit_program)

        help_menu = Menu(menubar, tearoff=False)
        menubar.add_cascade(label="Help", menu=help_menu)
        help_menu.add_command(label="About", command=self.show_about)

        # Create buttons for functionalities
        discord_button = RoundedButton(self, text="Discord Message Sender", command=self.open_discord_window, width=200, height=50)
        discord_button.pack(pady=10)
        
        settings_button = RoundedButton(self, text="Settings", command=self.open_settings_window, width=200, height=50)
        settings_button.pack(pady=10)

        check_updates_button = RoundedButton(self, text="Check for Updates", command=self.check_for_updates, width=200, height=50)
        check_updates_button.pack(pady=10)


        self.countdown_label = tk.Label(self, text="", font=("Helvetica", 16), bg=self['bg'])  # Set background color to parent's background color
        self.countdown_label.pack(pady=5, side=tk.BOTTOM)

        # Apply theme
        self.change_theme()

        # Start updating countdown
        self.update_countdown()
    def get_ip_address(self):
        # Use an IP geolocation service to obtain the user's IP address
        response = requests.get('https://api.ipify.org?format=json')
        if response.status_code == 200:
            return response.json()['ip']
        else:
            return None

    def fetch_weather_data(self):
        if self.ip_address:
            # Use IP geolocation to get user's approximate location
            response = requests.get(f'http://ip-api.com/json/{self.ip_address}')
            if response.status_code == 200:
                location_data = response.json()
                if location_data['status'] == 'success':
                    lat = location_data['lat']
                    lon = location_data['lon']
                    # Use latitude and longitude to fetch weather data from a weather API
                    weather_api_key = 'YOUR_WEATHER_API_KEY'
                    weather_response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={weather_api_key}&units=metric')
                    if weather_response.status_code == 200:
                        return weather_response.json()
        return None

    def display_weather_info(self):
        weather_data = self.fetch_weather_data()
        if weather_data:
            temperature = weather_data['main']['temp']
            description = weather_data['weather'][0]['description']
            self.weather_label = tk.Label(self, text=f"Temperature: {temperature}°C, {description}", font=("Helvetica", 12), bg=self['bg'])
            self.weather_label.pack(pady=5)

        # Schedule periodic updates of weather information
        self.after(600000, self.display_weather_info)  # Update weather info every 10 minutes (600,000 milliseconds)
    def check_for_updates(self):
        try:
            response = requests.get(VERSION_URL)
            if response.status_code == 200:
                latest_version = response.json()["tag_name"]
                if latest_version != CURRENT_VERSION:
                    if messagebox.askyesno("Update Available", f"A new version ({latest_version}) is available. Do you want to update?"):
                        self.update_to_latest_version()
                else:
                    messagebox.showinfo("No Updates", "You have the latest version.")
            else:
                messagebox.showerror("Error", "Failed to check for updates.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

    def update_to_latest_version(self):
        try:
            response = requests.get(UPDATE_URL)
            if response.status_code == 200:
                updated_code = response.text
                # Replace the contents of the current script with the updated code
                with open(__file__, "w") as file:
                    file.write(updated_code)
                # Restart the application
                python = sys.executable
                os.execl(python, python, *sys.argv)
            else:
                messagebox.showerror("Error", "Failed to download update.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred during update: {str(e)}")

    # Rest of the class remains the same

    def update_countdown(self):
        remaining_time = self.access_code_valid_until - datetime.now()
        if remaining_time.total_seconds() > 0:
            days = remaining_time.days
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            countdown_text = ""
            if days > 0:
                countdown_text += f"{days} day{'s' if days != 1 else ''} "
            if hours > 0:
                countdown_text += f"{hours} hour{'s' if hours != 1 else ''} "
            if minutes > 0:
                countdown_text += f"{minutes} minute{'s' if minutes != 1 else ''} "
            if seconds > 0:
                countdown_text += f"{seconds} second{'s' if seconds != 1 else ''}"
            self.countdown_label.config(text=countdown_text)
            self.countdown_label.after(1000, self.update_countdown)
        else:
            messagebox.showinfo("Key Expired", "The access code has expired. Please enter the key again.")
            self.destroy()  # Close the application

    def open_discord_window(self):
        # Hide current window
        self.withdraw()
        # Open Discord Message Sender window
        DiscordMessageSenderWindow(self, self.theme_var)

    def open_settings_window(self):
        # Hide current window
        self.withdraw()
        # Open Settings window
        SettingsWindow(self, self.theme_var)

    def show_about(self):
        messagebox.showinfo("About", "This is a sample application.")

    def exit_program(self):
        self.destroy()  # To close the ThemedWindow instance
        self.parent.destroy()  # To close the root window



class SettingsWindow(ThemedWindow):
    def __init__(self, parent, theme_var):
        super().__init__(parent, theme_var)
        self.title("Settings")
        self.geometry("400x400")

        tk.Label(self, text="Theme:", font=("Arial", 12)).pack(pady=5)

        # Light Theme Toggle
        self.light_toggle_frame = tk.Frame(self, bg=self['bg'])
        self.light_toggle_frame.pack(pady=5)

        self.light_toggle_button = RoundedButton(self.light_toggle_frame, text="Light", radius=15, width=100, height=30, bg="#F0F0F0", fg="#000", command=lambda: self.select_theme("light"))
        self.light_toggle_button.pack(side=tk.LEFT)

        # Dark Theme Toggle
        self.dark_toggle_frame = tk.Frame(self, bg=self['bg'])
        self.dark_toggle_frame.pack(pady=5)

        self.dark_toggle_button = RoundedButton(self.dark_toggle_frame, text="Dark", radius=15, width=100, height=30, bg="#202020", fg="#FFF", command=lambda: self.select_theme("dark"))
        self.dark_toggle_button.pack(side=tk.LEFT)

        ttk.Button(self, text="Back to Main Menu", command=self.back_to_main, style="Custom.TButton").pack(pady=5, side=tk.BOTTOM)

        # Initialize theme highlighting
        self.highlight_theme()

    def highlight_theme(self):
        current_theme = self.theme_var.get()
        if current_theme == "light":
            self.light_toggle_frame.config(highlightbackground="green", highlightthickness=2)
            self.dark_toggle_frame.config(highlightbackground=self['bg'], highlightthickness=0)
        elif current_theme == "dark":
            self.dark_toggle_frame.config(highlightbackground="green", highlightthickness=2)
            self.light_toggle_frame.config(highlightbackground=self['bg'], highlightthickness=0)

    def select_theme(self, theme):
        self.theme_var.set(theme)
        self.change_theme()
        self.highlight_theme()  # Update theme highlighting
        settings = {"theme": self.theme_var.get()}
        self.save_settings(settings)
        self.parent.change_theme()  # Apply theme to parent window

    def back_to_main(self):
        self.withdraw()
        self.parent.deiconify()

if __name__ == "__main__":
    root = tk.Tk()
    root.style = ttk.Style()
    root.style.theme_create("CustomStyle", parent="alt", settings={
        "TButton": {
            "configure": {"padding": 5, "relief": "flat", "background": "#007bff", "foreground": "white"},
            "map": {"background": [("active", "#0056b3")]}
        }
    })
    root.style.theme_use("CustomStyle")
    access_code_window = AccessCodeWindow(root)
    root.mainloop()
