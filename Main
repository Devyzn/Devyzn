import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, Menu
import requests
import time
import threading
import json
import zipfile
import shutil

# Additional imports for image support and font
from PIL import ImageTk, Image

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
IMG_DIR = os.path.join(CURRENT_DIR, "Img")  # Directory containing images
VERSION_URL = "https://api.github.com/Devyzn/Devyzn/releases/latest"
CURRENT_VERSION = "1.0.0"

SETTINGS_FILE = os.path.join(CURRENT_DIR, "settings.json")

def check_for_updates():
    try:
        response = requests.get(VERSION_URL)
        if response.status_code == 200:
            latest_version_info = response.json()
            latest_version = latest_version_info["tag_name"]  # Assuming GitHub release API response structure
            download_url = latest_version_info["assets"][0]["browser_download_url"]  # Assuming there's one asset
            if latest_version != CURRENT_VERSION:
                if messagebox.askyesno("Update Available", f"Version {latest_version} is available. Do you want to update now?"):
                    download_and_install_update(download_url)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to check for updates: {str(e)}")

def download_and_install_update(download_url):
    try:
        response = requests.get(download_url, stream=True)
        if response.status_code == 200:
            with open("latest.zip", "wb") as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)
            with zipfile.ZipFile("latest.zip", "r") as zip_ref:
                zip_ref.extractall("latest_update")
            os.remove("latest.zip")
            # Copy new files to current directory
            for item in os.listdir("latest_update"):
                s = os.path.join("latest_update", item)
                d = os.path.join(CURRENT_DIR, item)
                if os.path.isdir(s):
                    if os.path.exists(d):
                        shutil.rmtree(d)
                    shutil.copytree(s, d)
                else:
                    shutil.copy2(s, d)
            shutil.rmtree("latest_update")
            messagebox.showinfo("Update Complete", "The application has been updated. Please restart the application.")
            root.quit()
        else:
            messagebox.showerror("Error", "Failed to download the update.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to install the update: {str(e)}")

def save_settings(settings):
    with open(SETTINGS_FILE, 'w') as file:
        json.dump(settings, file)

def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, 'r') as file:
            settings = json.load(file)
            if "theme" in settings and settings["theme"]:
                return settings
    return {"theme": "dark"}

def check_token(token):
    headers = {
        'Authorization': token,
        'Content-Type': 'application/json'
    }
    response = requests.get('https://discord.com/api/v9/users/@me', headers=headers)
    return response.status_code == 200

def get_random_word():
    response = requests.get('https://random-word-api.herokuapp.com/word')
    if response.status_code == 200:
        return response.json()[0]
    else:
        return "Hello"

def get_user_username(token):
    headers = {
        'Authorization': token,
        'Content-Type': 'application/json'
    }
    response = requests.get('https://discord.com/api/v9/users/@me', headers=headers)
    if response.status_code == 200:
        return response.json()['username']
    else:
        return None

def open_discord_window(self):
    DiscordMessageSenderWindow(self.root)
    self.root.withdraw()

class DiscordMessageSenderWindow:
    def __init__(self, parent):
        self.parent = parent
        self.root = tk.Toplevel(parent)
        self.root.title("Discord Message Sender")
        self.root.geometry("400x400")

        self.settings = load_settings()
        self.set_theme(self.settings["theme"])

        container = tk.Frame(self.root, padx=20, pady=20)
        container.pack(fill="both", expand=True)

        tk.Label(container, text="Discord Token:").grid(row=0, column=0, sticky="e")
        self.token_entry = tk.Entry(container)
        self.token_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(container, text="Number of Messages:").grid(row=1, column=0, sticky="e")
        self.total_messages_entry = tk.Entry(container)
        self.total_messages_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(container, text="Delay (seconds):").grid(row=2, column=0, sticky="e")
        self.delay_entry = tk.Entry(container)
        self.delay_entry.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(container, text="Channel ID:").grid(row=3, column=0, sticky="e")
        self.channel_id_entry = tk.Entry(container)
        self.channel_id_entry.grid(row=3, column=1, padx=10, pady=5)

        self.log_text = scrolledtext.ScrolledText(container, width=40, height=10)
        self.log_text.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.send_button = tk.Button(container, text="Send", command=self.toggle_sending)
        self.send_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.back_button = tk.Button(container, text="Back", command=self.back_to_main)
        self.back_button.grid(row=6, column=0, columnspan=2, pady=10)

        self.sending = False
        self.token = tk.StringVar()
        self.total_messages = tk.IntVar()
        self.delay = tk.IntVar()
        self.channel_id = tk.StringVar()

        self.fade_in()

    def fade_in(self):
        alpha = 0.0
        duration = 1.0

        def increase_alpha():
            nonlocal alpha
            alpha += 0.01
            self.root.attributes('-alpha', alpha)
            if alpha < 1:
                self.root.after(int(duration / 100 * 1000), increase_alpha)

        increase_alpha()

    def create_widgets(self):
        self.root.geometry("500x400")

        self.style = ttk.Style()
        self.style.configure('TLabel', font=('Helvetica', 10))
        self.style.configure('TEntry', relief='flat', font=('Helvetica', 10))
        self.style.configure('TButton', font=('Helvetica', 10, 'bold'))

        container = ttk.Frame(self.root, padding="20 20 20 20")
        container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        ttk.Label(container, text="Discord Token:").grid(row=0, column=0, sticky="e")
        self.token_entry = ttk.Entry(container, textvariable=self.token, width=40)
        self.token_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(container, text="Number of Messages:").grid(row=1, column=0, sticky="e")
        self.total_messages_entry = ttk.Entry(container, textvariable=self.total_messages)
        self.total_messages_entry.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(container, text="Delay (seconds):").grid(row=2, column=0, sticky="e")
        self.delay_entry = ttk.Entry(container, textvariable=self.delay)
        self.delay_entry.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(container, text="Channel ID:").grid(row=3, column=0, sticky="e")
        self.channel_id_entry = ttk.Entry(container, textvariable=self.channel_id)
        self.channel_id_entry.grid(row=3, column=1, padx=10, pady=5)

        self.log_text = scrolledtext.ScrolledText(container, width=40, height=10, state='disabled', font=('Helvetica', 8))
        self.log_text.grid(row=5, column=0, columnspan=2, padx=10, pady=10)
        self.send_button = ttk.Button(container, text="Send", command=self.toggle_sending)
        self.send_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.back_button = ttk.Button(container, text="Back", command=self.back_to_main)
        self.back_button.grid(row=6, column=0, columnspan=2, pady=10)

    def toggle_sending(self):
        if self.sending:
            self.sending = False
            self.send_button.config(text="Start")
        else:
            token = self.token_entry.get().strip()
            if not check_token(token):
                messagebox.showerror("Error", "Invalid token")
                return

            self.username = get_user_username(token)
            if not self.username:
                messagebox.showerror("Error", "Could not retrieve username")
                return

            self.sending = True
            self.send_button.config(text="Stop")
            self.log_text.config(state='normal')
            self.log_text.insert(tk.END, f"Starting message sending...\n")
            self.log_text.config(state='disabled')
            threading.Thread(target=self.send_messages, args=(token,)).start()

    def send_messages(self, token):
        total_messages = int(self.total_messages_entry.get())
        delay = int(self.delay_entry.get())
        channel_id = self.channel_id_entry.get()

        headers = {
            'Authorization': token,
            'Content-Type': 'application/json'
        }
        for i in range(total_messages):
            if not self.sending:
                break
            word = get_random_word()
            payload = {
                'content': word,
                'tts': False
            }
            response = requests.post(f'https://discord.com/api/v9/channels/{channel_id}/messages', headers=headers, json=payload)
            if response.status_code == 200:
                self.log_text.config(state='normal')
                self.log_text.insert(tk.END, f"Message {i+1}: {word}\n")
                self.log_text.config(state='disabled')
            else:
                self.log_text.config(state='normal')
                self.log_text.insert(tk.END, f"Failed to send message {i+1}\n")
                self.log_text.config(state='disabled')
            time.sleep(delay)

        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, "Message sending complete.\n")
        self.log_text.config(state='disabled')
        self.sending = False
        self.send_button.config(text="Start")

    def back_to_main(self):
        self.root.destroy()
        self.parent.deiconify()

    def set_theme(self, theme):
        if theme == "dark":
            self.root.configure(bg="#333")
        else:
            self.root.configure(bg="#FFF")

class AccessCodeWindow:
    def __init__(self, root):
        self.root = root
        self.root.geometry("400x200")
        self.root.title("Access Code")

        tk.Label(root, text="Enter Access Code:").pack(pady=20)
        self.access_code_entry = tk.Entry(root, show="*")
        self.access_code_entry.pack(pady=10)
        tk.Button(root, text="Submit", command=self.check_access_code).pack(pady=10)

    def check_access_code(self):
        access_code = self.access_code_entry.get()
        if access_code == "correct_code":
            self.open_main_window()
        else:
            messagebox.showerror("Error", "Incorrect access code")

    def open_main_window(self):
        self.root.withdraw()
        MainWindow(self.root)

class MainWindow:
    def __init__(self, root):
        self.root = root
        self.main_window = tk.Toplevel(root)
        self.main_window.geometry("800x600")
        self.main_window.title("Main Window")

        menubar = Menu(self.main_window)
        self.main_window.config(menu=menubar)

        file_menu = Menu(menubar, tearoff=False)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Check for Updates", command=check_for_updates)
        file_menu.add_command(label="Exit", command=self.exit_program)

        help_menu = Menu(menubar, tearoff=False)
        menubar.add_cascade(label="Help", menu=help_menu)
        help_menu.add_command(label="About", command=self.show_about)

        tk.Label(self.main_window, text="Welcome to the Main Window!").pack(pady=20)
        tk.Button(self.main_window, text="Open Discord Message Sender", command=lambda: open_discord_window(self)).pack(pady=10)

    def show_about(self):
        messagebox.showinfo("About", "This is a sample application.")

    def exit_program(self):
        self.main_window.destroy()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    access_code_window = AccessCodeWindow(root)
    root.mainloop()
